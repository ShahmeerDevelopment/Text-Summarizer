{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:38.445570Z\",\"iopub.execute_input\":\"2024-05-16T20:29:38.446821Z\",\"iopub.status.idle\":\"2024-05-16T20:29:38.453040Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:38.446770Z\",\"shell.execute_reply\":\"2024-05-16T20:29:38.451845Z\"}}\nfrom datasets import load_dataset\nimport matplotlib.pyplot as plt\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:38.455133Z\",\"iopub.execute_input\":\"2024-05-16T20:29:38.455419Z\",\"iopub.status.idle\":\"2024-05-16T20:29:40.105112Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:38.455395Z\",\"shell.execute_reply\":\"2024-05-16T20:29:40.103999Z\"}}\ndataset = load_dataset(\"multi_news\")\nprint(f\"Features: {dataset['train'].column_names}\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:40.106840Z\",\"iopub.execute_input\":\"2024-05-16T20:29:40.107534Z\",\"iopub.status.idle\":\"2024-05-16T20:29:40.115657Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:40.107492Z\",\"shell.execute_reply\":\"2024-05-16T20:29:40.114447Z\"}}\ndataset\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:40.117482Z\",\"iopub.execute_input\":\"2024-05-16T20:29:40.118301Z\",\"iopub.status.idle\":\"2024-05-16T20:29:40.132854Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:40.118259Z\",\"shell.execute_reply\":\"2024-05-16T20:29:40.131298Z\"}}\nsample = dataset[\"train\"][1]\nprint(f\"\"\"Document (excerpt of 2000 characters, total length: {len(sample[\"document\"])}):\"\"\")\nprint(sample[\"document\"][:2000])\nprint(f'\\nSummary (length: {len(sample[\"summary\"])}):')\nprint(sample[\"summary\"])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:40.136435Z\",\"iopub.execute_input\":\"2024-05-16T20:29:40.137234Z\",\"iopub.status.idle\":\"2024-05-16T20:29:41.378249Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:40.137208Z\",\"shell.execute_reply\":\"2024-05-16T20:29:41.376859Z\"}}\nfrom transformers import BartForConditionalGeneration, AutoTokenizer\n\nmodel_ckpt = \"sshleifer/distilbart-cnn-6-6\"\ntokenizer = AutoTokenizer.from_pretrained(model_ckpt)\nmodel = BartForConditionalGeneration.from_pretrained(model_ckpt)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:29:41.379806Z\",\"iopub.execute_input\":\"2024-05-16T20:29:41.380235Z\",\"iopub.status.idle\":\"2024-05-16T20:30:38.222512Z\",\"shell.execute_reply.started\":\"2024-05-16T20:29:41.380198Z\",\"shell.execute_reply\":\"2024-05-16T20:30:38.221586Z\"}}\n%%time\nd_len = [len(tokenizer.encode(s)) for s in dataset[\"validation\"][\"document\"]]\ns_len = [len(tokenizer.encode(s)) for s in dataset[\"validation\"][\"summary\"]]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:30:38.224020Z\",\"iopub.execute_input\":\"2024-05-16T20:30:38.224301Z\",\"iopub.status.idle\":\"2024-05-16T20:30:38.826707Z\",\"shell.execute_reply.started\":\"2024-05-16T20:30:38.224276Z\",\"shell.execute_reply\":\"2024-05-16T20:30:38.825616Z\"}}\nfig, axes = plt.subplots(1, 2, figsize=(10, 3.5), sharey=True)\naxes[0].hist(d_len, bins=20, color=\"C0\", edgecolor=\"C0\")\naxes[0].set_title(\"Document Token Length\")\naxes[0].set_xlabel(\"Length\")\n\naxes[0].set_ylabel(\"Count\")\naxes[1].hist(s_len, bins=20, color=\"C0\", edgecolor=\"C0\")\naxes[1].set_title(\"Summary Token Length\")\naxes[1].set_xlabel(\"Length\")\nplt.tight_layout()\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:30:38.828462Z\",\"iopub.execute_input\":\"2024-05-16T20:30:38.828911Z\",\"iopub.status.idle\":\"2024-05-16T20:31:05.038759Z\",\"shell.execute_reply.started\":\"2024-05-16T20:30:38.828855Z\",\"shell.execute_reply\":\"2024-05-16T20:31:05.037608Z\"}}\ndef convert_examples_to_features(example_batch):\n    input_encodings = tokenizer(example_batch[\"document\"], max_length=1024, truncation=True)\n    \n    with tokenizer.as_target_tokenizer():\n        target_encodings = tokenizer(example_batch[\"summary\"], max_length=256, truncation=True)\n        \n    return {\"input_ids\": input_encodings[\"input_ids\"], \n           \"attention_mask\": input_encodings[\"attention_mask\"], \n           \"labels\": target_encodings[\"input_ids\"]}\n\ndataset_tf = dataset.map(convert_examples_to_features, batched=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:31:05.040267Z\",\"iopub.execute_input\":\"2024-05-16T20:31:05.041100Z\",\"iopub.status.idle\":\"2024-05-16T20:31:05.049735Z\",\"shell.execute_reply.started\":\"2024-05-16T20:31:05.041057Z\",\"shell.execute_reply\":\"2024-05-16T20:31:05.048314Z\"}}\ncolumns = [\"input_ids\", \"labels\", \"attention_mask\"]\ndataset_tf.set_format(type=\"torch\", columns=columns)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:31:05.051618Z\",\"iopub.execute_input\":\"2024-05-16T20:31:05.051975Z\",\"iopub.status.idle\":\"2024-05-16T20:31:05.252397Z\",\"shell.execute_reply.started\":\"2024-05-16T20:31:05.051947Z\",\"shell.execute_reply\":\"2024-05-16T20:31:05.250982Z\"}}\nfrom transformers import DataCollatorForSeq2Seq\nseq2seq_data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:31:05.257725Z\",\"iopub.execute_input\":\"2024-05-16T20:31:05.258166Z\",\"iopub.status.idle\":\"2024-05-16T20:31:05.306107Z\",\"shell.execute_reply.started\":\"2024-05-16T20:31:05.258126Z\",\"shell.execute_reply\":\"2024-05-16T20:31:05.304947Z\"}}\nfrom transformers import TrainingArguments, Trainer\n\ntraining_args = TrainingArguments(output_dir='bart-multi-news', num_train_epochs=1, warmup_steps=500, \n                                  per_device_train_batch_size=1, per_device_eval_batch_size=1, \n                                  weight_decay=0.01, logging_steps=10, push_to_hub=False, \n                                  evaluation_strategy='steps', eval_steps=500, save_steps=1e6, \n                                  gradient_accumulation_steps=16)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T20:31:05.307481Z\",\"iopub.execute_input\":\"2024-05-16T20:31:05.309873Z\",\"iopub.status.idle\":\"2024-05-16T23:39:01.298002Z\",\"shell.execute_reply.started\":\"2024-05-16T20:31:05.309843Z\",\"shell.execute_reply\":\"2024-05-16T23:39:01.296718Z\"}}\ntrainer = Trainer(model=model, args=training_args, tokenizer=tokenizer, \n                  data_collator=seq2seq_data_collator, \n                  train_dataset=dataset_tf[\"train\"], \n                  eval_dataset=dataset_tf[\"validation\"])\n\ntrainer.train()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T23:39:01.299716Z\",\"iopub.execute_input\":\"2024-05-16T23:39:01.300226Z\",\"iopub.status.idle\":\"2024-05-16T23:39:01.306883Z\",\"shell.execute_reply.started\":\"2024-05-16T23:39:01.300189Z\",\"shell.execute_reply\":\"2024-05-16T23:39:01.305578Z\"}}\nimport torch\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T23:39:01.311320Z\",\"iopub.execute_input\":\"2024-05-16T23:39:01.311687Z\",\"iopub.status.idle\":\"2024-05-16T23:39:03.323883Z\",\"shell.execute_reply.started\":\"2024-05-16T23:39:01.311659Z\",\"shell.execute_reply\":\"2024-05-16T23:39:03.322616Z\"}}\nsample_text = dataset[\"test\"][1][\"document\"]\nreference = dataset[\"test\"][1][\"summary\"]\n\ninput_ids = tokenizer(sample_text, max_length=1024, truncation=True, \n                   padding='max_length', return_tensors='pt').to(device)\nsummaries = model.generate(input_ids=input_ids['input_ids'], \n                           attention_mask=input_ids['attention_mask'], \n                           max_length=256)\n\ndecoded_summaries = [tokenizer.decode(s, skip_special_tokens=True, \n                                      clean_up_tokenization_spaces=True) \n                    for s in summaries]\n\nprint(\"Document:\")\nprint(sample_text)\nprint(\"\\nReference Summary:\")\nprint(reference)\nprint(\"\\nModel Summary:\")\nprint(decoded_summaries[0])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-16T23:39:03.326466Z\",\"iopub.execute_input\":\"2024-05-16T23:39:03.327509Z\",\"iopub.status.idle\":\"2024-05-16T23:39:06.313860Z\",\"shell.execute_reply.started\":\"2024-05-16T23:39:03.327465Z\",\"shell.execute_reply\":\"2024-05-16T23:39:06.312568Z\"}}\nfrom transformers import BartForConditionalGeneration, AutoTokenizer\n\nmodel_ckpt = \"sshleifer/distilbart-cnn-6-6\"\ntokenizer = AutoTokenizer.from_pretrained(model_ckpt)\nmodel = BartForConditionalGeneration.from_pretrained(model_ckpt)\n\nsave_directory = \"/kaggle/working/\"  \nmodel.save_pretrained(save_directory)\ntokenizer.save_pretrained(save_directory)\n\n\n\n","metadata":{"_uuid":"9d971d65-ba13-412e-8775-65aec30999e1","_cell_guid":"d0583e45-f38d-4eba-aed3-e558e7df22fd","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}